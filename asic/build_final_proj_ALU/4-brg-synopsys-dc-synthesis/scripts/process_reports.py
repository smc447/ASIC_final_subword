'''
==========================================================================
process_reports.py
==========================================================================
Utility functions for processing reports.

Author : Yanghui Ou
Date   : Mar 5, 2021
'''
import gzip
import os
import sys
import textwrap

#-------------------------------------------------------------------------
# summarize_synopsys_dc_qor_rpt
#-------------------------------------------------------------------------
# Find the worst slack in the design.mapped.qor.rpt generated by the
# timeDesign command.

def summarize_synopsys_dc_qor_rpt( rpt ):
  slack = 'N/A'
  with open( rpt, 'rt' ) as f:
    for line in f:
      if line.startswith( '  Critical Path Slack:' ):
        if slack == 'N/A':
          slack = float( line.split(':')[1] )
        elif slack > float( line.split(':')[1] ):
          slack = float( line.split(':')[1] )

  return slack

#-------------------------------------------------------------------------
# summarize_cdns_innovus_summaryReport
#-------------------------------------------------------------------------
# Find chip area, core area, macros area, standard cells area, and design
# area from the report generated by the summaryReport command.

def summarize_synopsys_dc_area_rpt( rpt ):
    design_area   = 'N/A'
    stdcells_area = 'N/A'
    macros_area   = 'N/A'
    chip_area     = 'N/A'
    with open( rpt, 'r' ) as f:
      for line in f:

        if line.startswith( 'Total cell area:' ):
          try:
            stdcells_area = float( line.split( ': ' )[1].strip())
          except:
            stdcells_area = "undefined"
          continue

        if line.startswith( 'Total area:' ):
          try: 
            chip_area = float(line.split( ': ' )[1].strip())
          except:
            chip_area = "undefined"
          continue

        if line.startswith( 'Macro/Black Box area:' ):
          try: 
            macros_area = float( line.split( ': ' )[1].strip())
          except:
            macros_area = "undefined"
          continue

    if stdcells_area != 'N/A' and macros_area != 'N/A':
      design_area = stdcells_area + macros_area

    return {
      'chip_area'     : chip_area,
      'stdcells_area' : stdcells_area,
      'macros_area'   : macros_area,
      'design_area'   : design_area,
    }

#-------------------------------------------------------------------------
# summarize_snps_pt_power_report
#-------------------------------------------------------------------------

def summarize_snps_pt_power_report( rpt ):
  power = 'N/A'
  with open( rpt ) as f:
    for line in f:
      line = line.split( '#' )[0].strip()
      if line.startswith( 'Total Power ' ):
        power = float( line.split('=')[1].strip().split(' ')[0] )*1000
        break
  return power

def get_env(envVarStr):
    var = os.getenv(envVarStr)
    try:
        assert var != None
    except:
        if envVarStr.isupper():
            print("Please set {} as a global environment variable in the adk.sh file for this technology using export {}=<value>".format(envVarStr,envVarStr))
        else:
            print("Please provide {} as a parameter in the mflowgen construct.py file".format(envVarStr))
        sys.exit()
    return var

#-------------------------------------------------------------------------
# configure
#-------------------------------------------------------------------------

def run_step():
  area_rpt   = '../reports/{}.mapped.area.rpt'.format(get_env("design_name"))
  timing_rpt = '../reports/{}.mapped.qor.rpt'.format(get_env("design_name"))
  clk_period = float( get_env("clock_period") )

  area_results  = summarize_synopsys_dc_area_rpt( area_rpt )
  design_area   = area_results['design_area']
  stdcells_area = area_results['stdcells_area']
  macros_area   = area_results['macros_area']
  chip_area     = area_results['chip_area']

  slack   = summarize_synopsys_dc_qor_rpt( timing_rpt )

  target_clock = clk_period
  actual_clk = target_clock - slack

  wns_ratio = 0.03
  meet_timing = slack >= 0 or abs( slack ) / target_clock < wns_ratio

  warning = '' if meet_timing else (
    f'Warning: since the negative slack is more than {wns_ratio:.1%} '
    'of the constraint, this design does not meet timing and the energy '
    'results are invalid!\n'
  )

  actual_clk_str = f'{actual_clk:4g} ns' if meet_timing else 'n/a'
  summary = textwrap.dedent(f'''\
    ==========================================================================
      Summary
    ==========================================================================
    {warning}
    design_name = {get_env("design_name")}

    area & timing
      design_area   = {design_area} um^2
      stdcells_area = {stdcells_area} um^2
      macros_area   = {macros_area} um^2
      chip_area     = {chip_area} um^2
      constraint    = {target_clock} ns
      slack         = {slack} ns
      actual_clk    = {actual_clk_str}

    ''')

    # power & energy''')

  # for vcd in vcd_files:
  #   basename = os.path.splitext( vcd )[0]
  #   pwr_rpt    = f'inputs/power_reports/{basename}.pwr.rpt'
  #   saif_file  = f'inputs/saif/{basename}.saif'

  #   power   = summarize_snps_pt_power_report( pwr_rpt )
  #   ncycles = get_ncycles_from_saif( saif_file, clk_period )
  #   energy = power * ncycles * clk_period / 1000
  #   if meet_timing:
  #     summary += textwrap.indent( textwrap.dedent(f'''
  #       {vcd}
  #         exec_time = {ncycles} cycles
  #         power     = {power:4g} mW
  #         energy    = {energy:4g} nJ
  #     '''), '  ')
  #   else:
  #     summary += textwrap.indent( textwrap.dedent(f'''
  #       {vcd}
  #         exec_time = {ncycles} cycles
  #         power     = n/a
  #         energy    = n/a
  #     '''), '  ')

  print( summary )
  with open( 'summary.txt', 'w' ) as f:
    f.write( summary )


if __name__ == "__main__":
  run_step()